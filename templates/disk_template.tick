var host string
var instance string
var type string
var type_instance string

var info float
var warn float
var crit float

var cron = '*/2 * * * *'
var period = 1m
var accpt_data_missing_t = 5m

var email_channel list
var email_subject = ''
var email_details = ''

var gb_b = 1073741824.0

var database = 'collectd'
var rp  = 'autogen'
var measurement string

var outputDB = 'chronograf'
var outputRP = 'autogen'
var outputMeasurement = 'alerts'

var idTag = 'alertID'
var levelTag = 'level'
var triggerType = 'custom'
var idVar = ':{{.Group}}'

var messageField = 'message'
var durationField = 'duration'
var alertName = instance + '_' + type + '_' + type_instance

var data = batch
    |query(
        'SELECT LAST("value") as "value"
        FROM "' + database + '"."' + rp + '"."' + measurement +'"
        WHERE
        host= \'' +
        host +
        '\'
        AND type_instance=\'' +
        type_instance +
        '\'
        AND type=\'' +
        type +
        '\'
        AND instance = \'' +
        instance +
        '\''
    )
        .period(period)
        .cron(cron)
        .align()
        .groupBy(*)

var eval_data = data
    |eval(lambda: "value" / gb_b)
        .as('result')
    |log()
        .level('DEBUG')

var alert = eval_data
    |alert()
        .stateChangesOnly()
        .info(lambda: "result" < info)
        .warn(lambda: "result" < warn)
        .crit(lambda: "result" < crit)
        .message(email_subject + ' {{ .Level }}')
        .idTag(idTag)
        .levelTag(levelTag)
        .id(idVar)
        .messageField(messageField)
        .durationField(durationField)
        .details(
            '''
            <h2> Task name : {{.TaskName}} </h2>
            <b>  Level : {{ .Level }} </b>
            <b>  Measurements : </b>{{.Name}}
            <p style="color:red"> Value :{{index .Fields "result" | printf "%0.2f"}}</p>
            <br><br>Time :{{.Time }}
            ''' +
            email_details
        )
        .email(email_channel)
alert
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', alertName)
        .tag('triggerType', triggerType)

alert
    |httpOut('output')

var trigger = data
    |deadman(0.0, accpt_data_missing_t)
        .stateChangesOnly()
        .message('Deadman - {{index .Tags "host"}} - {{.Level}}')
        .details('''
            <h2> Task name : {{.TaskName}} </h2>
            <b>  ID : {{.ID}} </b>
            <b>  Level : {{ .Level }} </b>
            <p style="color:red"> Emitted :{{index .Fields "emitted"}}</p>
            <br><br>Time :{{.Time }}
        ''')
        .email(email_channel)
